#!/usr/bin/python
"""
Module for decoding arbitrary binary data into ascii. This is a common challenge in brainteasers.
Copyright (C) Bill Mei 2013
Released under the MIT License
"""
ascii_vals = {"0x0": "nul", "0x1": "soh", "0x2": "stx", "0x3": "etx", "0x4": "eot", "0x5": "enq", "0x6": "ack", "0x7": "bel", "0x8": "bs", "0x9": "tab", "0xa": "lf", "0xb": "vt", "0xc": "ff", "0xd": "cr", "0xe": "so", "0xf": "si", "0x40": "@", "0x41": "a", "0x42": "b", "0x43": "c", "0x44": "d", "0x45": "e", "0x46": "f", "0x47": "g", "0x48": "h", "0x49": "i", "0x4a": "j", "0x4b": "k", "0x4c": "l", "0x4d": "m", "0x4e": "n", "0x4f": "o", "0x10": "dle", "0x11": "dc1", "0x12": "dc2", "0x13": "dc3", "0x14": "dc4", "0x15": "nak", "0x16": "syn", "0x17": "etb", "0x18": "can", "0x19": "em", "0x1a": "sub", "0x1b": "esc", "0x1c": "fs", "0x1d": "gs", "0x1e": "rs", "0x1f": "us", "0x50": "p", "0x51": "q", "0x52": "r", "0x53": "s", "0x54": "t", "0x55": "u", "0x56": "v", "0x57": "w", "0x58": "x", "0x59": "y", "0x5a": "z", "0x5b": "[", "0x5d": "]", "0x5e": "^", "0x5f": "_", "0x20": "(space)", "0x21": "!", "0x23": "#", "0x24": "$", "0x25": "%", "0x26": "&", "0x27": "'", "0x28": "(", "0x29": ")", "0x2a": "*", "0x2b": "+", "0x2c": ",", "0x2d": "-", "0x2e": ".", "0x2f": "/", "0x60": "`", "0x61": "a", "0x62": "b", "0x63": "c", "0x64": "d", "0x65": "e", "0x66": "f", "0x67": "g", "0x68": "h", "0x69": "i", "0x6a": "j", "0x6b": "k", "0x6c": "l", "0x6d": "m", "0x6e": "n", "0x6f": "o", "0x30": "0", "0x31": "1", "0x32": "2", "0x33": "3", "0x34": "4", "0x35": "5", "0x36": "6", "0x37": "7", "0x38": "8", "0x39": "9", "0x3a": ":", "0x3b": ";", "0x3c": "<", "0x3d": "=", "0x3e": ">", "0x3f": "?", "0x70": "p", "0x71": "q", "0x72": "r", "0x73": "s", "0x74": "t", "0x75": "u", "0x76": "v", "0x77": "w", "0x78": "x", "0x79": "y", "0x7a": "z", "0x7b": "{", "0x7c": "|", "0x7d": "}", "0x7e": "~"}

def asciify_list(binums):
	output_string = ""
	for letter in binums:
		letter = str(hex(letter))
		output_string += ascii_vals[letter]
	return output_string

def asciify_block(binums, bytesize=8):
	new_list = [binums[i:i+bytesize] for i in range(0, len(binums), bytesize)]
	for letter in new_list:
		letter = "0b" + letter
	return asciify_list(new_list)
